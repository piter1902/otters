openapi: 3.0.0

info:
  title: Otters API
  description: Documentación OpenAPI
  version: "1.0"
  contact:
    name: Pedro Allue
    email: pedro.allue.tamargo@gmail.com

servers:
  - url: http://localhost:8080
    description: Localhost development server
  - url: https://stw-otters-backend.herokuapp.com/
    description: Heroku production server

tags:
  - name: "User"
    description: "Everithing about the users"
  - name: "Sanitary Zone"
    description: "Sanitary Zones"
  - name: "Statistics"
    description: "Statistics about system"
  - name: "Petitions"
    description: "Help petitions created by an user"
  - name: "Authentication"
    description: "User authentication logic"
  - name: "Posts"
    description: "Forum publications"

paths:
  /stats:
    get:
      tags:
        - "Statistics"
      description: Get stats for system
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stats"
  /user:
    # Get users
    get:
      tags:
        - "User"
      description: Get all users
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
    # Create user
    post:
      tags:
        - "User"
      description: Create a new user
      requestBody:
        description: Información del usuario. El campo _id será ignorado.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

  /user/{uid}:
    # Get specific user
    get:
      tags:
        - "User"
      description: Get an user with uid
      summary: Get an user with uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - "User"
      description: Update info of user with uid
      summary: Update info of user with uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Data to update user with id = uid
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    # Deletes specific user
    delete:
      tags:
        - "User"
      description: Deletes an user with _id = uid
      summary: Deletes an user with _id = uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: ok
        "404":
          description: User doesn't exit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{uid}/ban:
    post:
      tags:
        - "User"
      description: Update ban info of user with uid
      summary: Update ban info of user with uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      requestBody:
        description: Body with data about ban and its duration
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/bannedSchema"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bannedSchema"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{uid}/strike:
    post:
      tags:
        - "User"
      description: Update strike info of user with uid
      summary: Update strike info of user with uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User strike info updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /user/{uid}/strike/{petId}:
    post:
      tags:
        - "User"
      description: Update strike info of user with uid
      summary: Update strike info of user with uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User strike info updated and petition is cancelled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # User's petitions
  /user/{uid}/petitions:
    get:
      tags:
        - "User"
      description: Get all the petitions of the user uid
      summary: Get user's petitions with an uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitions"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # User's posts
  /user/{uid}/posts:
    get:
      tags:
        - "User"
      description: Get all the posts of the user uid
      summary: Get user's posts with an uid
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/posts"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    # Add a post
    post:
      tags:
        - "User"
      description: Add new post to the user with _id = uid
      summary: Add new post to the user
      requestBody:
        description: Info about the post.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/posts"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/posts"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over a specific post
  /user/{uid}/posts/{postId}:
    get:
      tags:
        - "User"
      description: Get a post with _id = locationId of the user uid
      summary: Get a specific post
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/posts"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - "User"
      description: Delete the post with _id = locationId of the user uid
      summary: Delete a post of an user
      parameters:
        - in: path
          name: uid
          description: UID of the user
          required: true
          schema:
            type: string
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Post deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Posts Routes
  # Posts
  /post:
    get:
      tags:
        - "Posts"
      description: Get all the posts
      summary: Get all posts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Succesful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postsWithUsername"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    # Add a post
    post:
      tags:
        - "Posts"
      description: Add new post
      summary: Add new post
      requestBody:
        description: Info about the post.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/posts"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/posts"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over a specific post
  /post/{postId}:
    get:
      tags:
        - "Posts"
      description: Get a post with _id = postId
      summary: Get a specific post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postsWithUsername"
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - "Posts"
      description: Delete the post with _id = postId
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Post deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over comments of a specific post
  /post/{postId}/comment:
    get:
      tags:
        - "Posts"
      description: Get all comment of post with _id = postId
      summary: Get all comments
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Post exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/postsWithUsername"
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - "Posts"
      description: Post a comment the post with _id = postId
      summary: Post a comment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      requestBody:
        description: Comment.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/comments"
      responses:
        "200":
          description: Comment post successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over possitive_valorations of a specific post
  /post/{postId}/possitivevaloration:
    get:
      tags:
        - "Posts"
      description: Get all possitive valorations of post with _id = postId
      summary: Get all possitive valorations
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post exists
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - "Posts"
      description: Post a possitive valoration the post with _id = postId
      summary: Post a possitive valoration
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      requestBody:
        description: Id of user who give the valoration.
        required: true
        content:
          application/json:
            schema:
              type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Possitive valoration post successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over negative_valorations of a specific post
  /post/{postId}/negativevaloration:
    get:
      tags:
        - "Posts"
      description: Get all negative valorations of post with _id = postId
      summary: Get all negative valorations
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Post exists
          content:
            application/json:
              schema:
                type: string
        "404":
          description: Post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    post:
      tags:
        - "Posts"
      description: Post a negative valoration the post with _id = postId
      summary: Post a negative valoration
      parameters:
        - in: path
          name: postId
          description: ID of the post
          required: true
          schema:
            type: string
      requestBody:
        description: Id of user who give the valoration.
        required: true
        content:
          application/json:
            schema:
              type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Negative valoration post successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or post does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  ##########################################################
  # Petitions Routes
  /petitions:
    # Add a petition
    post:
      tags:
        - "Petitions"
      description: Add new petition to the user with _id = uid
      summary: Add new petition to the user
      requestBody:
        description: Info about the petition.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/petitions"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Petition created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitions"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    #Get all petitions
    get:
      tags:
        - "Petitions"
      description: Get all existing petitions
      summary: Get all petitions
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/petitionsWithUsername"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Operations over a specific petition
  /petitions/{petitionId}:
    get:
      tags:
        - "Petitions"
      description: Get a petition with _id = locationId of an user
      summary: Get a specific petition
      parameters:
        - in: path
          name: petitionId
          description: ID of the petition
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Petition exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitionsWithUsername"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    # Update a petition
    put:
      tags:
        - "Petitions"
      description: Update the petition with _id = locationId
      summary: Update the info of a petition
      parameters:
        - in: path
          name: petitionId
          description: ID of the petition
          required: true
          schema:
            type: string
      requestBody:
        description: Info about the new petition.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/petitions"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Petition updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitions"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      tags:
        - "Petitions"
      description: Delete the petition with _id = locationId
      summary: Delete a petition
      parameters:
        - in: path
          name: petitionId
          description: ID of the petition
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Petition deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /petitions/{petitionId}/assign/{uid}:
    put:
      tags:
        - "Petitions"
      description: Assign user with _id = uid to the petition with _id = locationId
      summary: Assign a user to a petition
      parameters:
        - in: path
          name: petitionId
          description: ID of the petition
          required: true
          schema:
            type: string
        - in: path
          name: uid
          description: ID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User assigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitions"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /petitions/{petitionId}/cancel/{uid}:
    put:
      tags:
        - "Petitions"
      description: Unassign user with _id = uid to the petition with _id = locationId
      summary: Unassign a user to a petition
      parameters:
        - in: path
          name: petitionId
          description: ID of the petition
          required: true
          schema:
            type: string
        - in: path
          name: uid
          description: ID of the user
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User unassigned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/petitions"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "404":
          description: User or petition does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # SanitaryZone Routes
  # Get all zones
  /zone:
    get:
      description: Get all sanitary zones
      summary: Get all sanitary zones
      tags:
        - "Sanitary Zone"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/sanitaryZoneWithoutData"

  # Get a zone given its id
  /zone/{id}:
    get:
      description: Get sanitary zone given id
      summary: Get sanitary zone given id
      tags:
        - "Sanitary Zone"
      parameters:
        - in: path
          name: id
          description: Zone id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfull response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/sanitayZoneWithData"
        "404":
          description: Zone id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  # Fetch data from remote
  /zone/fetchData:
    get:
      tags:
        - "Sanitary Zone"
      description: Start zone remote source fetch data
      summary: Start zone remote source fetch data
      security:
        - bearerAuth: []
      responses:
        "202":
          description: Successful response. Server is fetching source asynchronously.

  # Get data given id
  /zone/{id}/data:
    get:
      tags:
        - "Sanitary Zone"
      description: Get zone data by id
      summary: Get zone data by id
      parameters:
        - in: path
          name: id
          description: Sanitary zone's id
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response. Data returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/sanitaryZoneData"

  # Authentication routes
  # Log in
  /auth/login:
    post:
      tags:
        - "Authentication"
      description: Log an user by email and password. Once logged, creates a JWT token related to the user
      requestBody:
        description: Body with user credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - email
              properties:
                password:
                  type: string
                email:
                  type: string
      responses:
        "401":
          description: Unauthorized. Error is explained in message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "200":
          description: User authorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: Generated JWT token related to the user. Expires in one day
                      userId:
                        type: integer
                        description: Logged user Id
  # Register
  /auth/register:
    post:
      tags:
        - "Authentication"
      description: Register an user with a name, an email, a sanitary zone and a password
      requestBody:
        description: Body with user info needed for registration
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - sanitaryZone
                - captchaResponse
              properties:
                name:
                  type: string
                  description: New user name
                email:
                  type: string
                  description: New user email. Must be unique
                password:
                  type: string
                sanitaryZone:
                  type: string
                  description: SanitaryZone of the user
                captchaResponse:
                  type: string
                  description: ReCaptcha verification token to verify user is not a robot
      responses:
        "400":
          description: Bad request. User already exist with that email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

components:
  # Security by bearer tokens (all )
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Stats scheme
    stats:
      type: object
      required:
        - "peticiones"
        - "foro"
        - "usuarios"
      properties:
        peticiones:
          type: object
          required:
            - "realizadas"
            - "atendidas"
            - "canceladas"
          properties:
            realizadas:
              type: number
            atendidas:
              type: number
            canceladas:
              type: number
        foro:
          type: object
          required:
            - "escritos"
            - "diaConMasPublicaciones"
          properties:
            escritos:
              type: number
            diaConMasPublicaciones:
              type: string
              format: date
        usuarios:
          type: object
          required:
            - "registrados"
            - "verificados"
          properties:
            registrados:
              type: number
            verificados:
              type: number
    # User Schema
    user:
      type: object
      required:
        - "name"
        - "image"
        - "email"
        - "sanitaryZone"
        - "password"
        - "strikes"
        - "isAdmin"
      properties:
        _id:
          type: integer
          description: Object identifier
        name:
          type: string
          description: Name of the user
        image:
          type: string
          description: Image of the user in base64
        email:
          type: string
          description: Email of the user
        sanitaryZone:
          type: string
          description: SanitaryZone of the user
        bannedObject:
          type: object
          $ref: "#/components/schemas/bannedSchema"
          description: Info about ban of the user
        strikes:
          type: number
          description: Number of strikes of the user
        isAdmin:
          type: boolean
          description: True if the user is admin, false if not
        petitions:
          type: array
          description: IDs of the user's petitions
          items:
            type: string
        posts:
          type: array
          description: IDs of the user's posts
          items:
            type: string
    bannedSchema:
      type: object
      required:
        - "banned"
        - "bannedUntil"
      properties:
        banned:
          type: boolean
          description: True if the user is banned, false if not
        bannedUntil:
          type: string
          format: date
          description: Date until the user is banned
    # Sanitary Zone Schema
    sanitaryZoneWithoutData:
      title: SanitaryZone
      type: object
      description: Sanitary Zone Schema without data
      required:
        - "name"
        - "updatedAt"
      properties:
        _id:
          type: integer
          description: Object identifier
        name:
          type: string
          description: Name of the sanitary zone
        updatedAt:
          type: string
          format: date
          description: Last date of data update

    sanitayZoneWithData:
      allOf:
        - $ref: "#/components/schemas/sanitaryZoneWithoutData"
        - properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/sanitaryZoneData"
      title: SanitaryZone
      description: Sanitary Zone Schema with data
      type: object

    # Data of sanitary zone
    sanitaryZoneData:
      type: object
      required:
        - "date"
        - "possitives"
      properties:
        _id:
          type: integer
          description: Object identifier
        date:
          type: string
          format: date
          description: Date of data
        possitives:
          type: integer
          description: Number of possitives at current date

    # Petition Schema
    petitions:
      type: object
      required:
        - "title"
        - "body"
        - "place"
        - "isUrgent"
        - "status"

      properties:
        _id:
          type: integer
          description: Object identifier
        title:
          type: string
          description: Title of the petition
        body:
          type: string
          description: A description of the petition
          maxLength: 150
        userId:
          type: string
          description: Petition's owner Id
        place:
          type: string
          description: Place where the petition is located
        isUrgent:
          type: boolean
          description: Indicates if the petition is urgent or not
          default: false
        targetDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
          description: Date when the petition expires
        status:
          type: string
          description: Status of the petition. It could be 'COMPLETED', 'CANCELLED', 'ASSIGNED' or 'OPEN'
        expTime:
          type: string
          description: Hour of the day when petition expires.
          example: "10:15"

    # Petitions with Username
    petitionsWithUsername:
      title: petitionsWithUsername
      type: object
      description: Object similar as Petition but instead of userId field, contains the userId and the userName
      required:
        - "_id"
        - "title"
        - "body"
        - "userInfo"
        - "targetDate"
        - "place"
        - "isUrgent"
        - "status"
        - "expTime"
      properties:
        _id:
          type: string
        title:
          type: string
        body:
          type: string
        userInfo:
          type: object
          properties:
            userId:
              type: string
              description: Petition's owner ID
            userName:
              type: string
              description: Petition's owner name
        targetDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
        place:
          type: string
        isUrgent:
          type: boolean
        status:
          type: string
        expTime:
          type: string

    # Post Schema
    posts:
      type: object
      required:
        - "title"
        - "body"
        - "date"
        - "publisher"

      properties:
        _id:
          type: integer
          description: Object identifier
        title:
          type: string
          description: Title of the post
        body:
          type: string
          description: Content of the post
          maxLength: 150
        publisher:
          type: string
          description: Post's owner Id
        date:
          type: string
          format: date
          description: Date of the publication
        comments:
          type: array
          description: Comments of the post
          items:
            $ref: "#/components/schemas/comments"
        positive_valorations:
          type: array
          description: Ids of users who valorate positively the post
          items:
            type: string
        negative_valorations:
          type: array
          description: Ids of users who valorate negatively the post
          items:
            type: string

    # PostsWithUsername Schema
    postsWithUsername:
      type: object
      description: Object similar as Post but instead of userId field, contains the userId and the userName
      required:
        - "title"
        - "body"
        - "date"
        - "publisher"

      properties:
        _id:
          type: integer
          description: Object identifier
        title:
          type: string
          description: Title of the post
        body:
          type: string
          description: Content of the post
          maxLength: 150
        userInfo:
          type: object
          properties:
            userId:
              type: string
              description: Post's owner ID
            userName:
              type: string
              description: Post's owner name
        date:
          type: string
          format: date
          description: Date of the publication
        comments:
          type: array
          description: Comments of the post
          items:
            $ref: "#/components/schemas/comments"
        positive_valorations:
          type: array
          description: Ids of users who valorate positively the post
          items:
            type: string
        negative_valorations:
          type: array
          description: Ids of users who valorate negatively the post
          items:
            type: string
    # Comments of a post
    comments:
      type: object
      required:
        - "publisherId"
        - "date"
        - "body"
      properties:
        _id:
          type: integer
          description: Object identifier
        publisherId:
          type: string
          description: Comment's owner Id
        date:
          type: string
          format: date
          description: Date of comment
        body:
          type: string
          description: Content of the comment

    # Error schema
    error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error Message
